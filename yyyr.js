
function OnLoad()
{
	return {
		"providers": ["songlistgen", "arc_cutter", "unite_speed"],
		"info": {
			"songlistgen": {
				"name": "songlist 生成器",
				"params": ["曲目标识符 (字母数字组合)","所在曲包","预览开始时间","预览结束时间"],
				"params_value": {
					"曲目标识符 (字母数字组合)": "",
					"所在曲包": "base",
					"预览开始时间": "0",
					"预览结束时间": "0"
				}
			},
			"arc_cutter": {
				"name": "短蛇段生成器 - 切蛇v2.1",
				"params": ["分割数", "样式"],
				"params_value": {
					"分割数": "",
					"样式": "1"
				}
			},
			"unite_speed": {
				"name": "统一流速Beta",
				"params": ["timing命令行","TimingGroup","BaseBPM"],
				"params_value": {
					"timing命令行": "timing(...);",
					"TimingGroup":"0",
					"BaseBPM": ""
				}
			}
		}
	}
}

function songlistgen(songid, set, preview, previewend)
{
	if(songid == null || songid == "")
	{
		return "请输入曲目标识符。";
	}
	songid = songid.replace(/[^\w+]/ig,"");
	var adeproject = GetCurrentProject();
	if(adeproject.Difficulties2[0] == null) adeproject.Difficulties2[0] = new AdeChartDifficulty();
	if(adeproject.Difficulties2[1] == null) adeproject.Difficulties2[1] = new AdeChartDifficulty();
	if(adeproject.Difficulties2[2] == null) adeproject.Difficulties2[2] = new AdeChartDifficulty();
	if(adeproject.Difficulties2[0].Rating == null || adeproject.Difficulties2[0].Rating == "" || parseInt(adeproject.Difficulties2[0].Rating.replace(/[^\-0-9]/ig,"")) == null) adeproject.Difficulties2[0].Rating = "-1";
	if(adeproject.Difficulties2[1].Rating == null || adeproject.Difficulties2[1].Rating == "" || parseInt(adeproject.Difficulties2[1].Rating.replace(/[^\-0-9]/ig,"")) == null) adeproject.Difficulties2[1].Rating = "-1";
	if(adeproject.Difficulties2[2].Rating == null || adeproject.Difficulties2[2].Rating == "" || parseInt(adeproject.Difficulties2[2].Rating.replace(/[^\-0-9]/ig,"")) == null) adeproject.Difficulties2[2].Rating = "-1";
	var slst = {
		"songs": [{
			"id": songid,
			"title_localized": {
				"en": adeproject.Title
			},
			"artist": adeproject.Artist,
			"bpm": adeproject.BaseBpm.toString(),
			"bpm_base": adeproject.BaseBpm,
			"set": (set == null || set == "") ? "base" : set,
			"purchase": "",
			"audioPreview": parseInt(preview) == NaN ? 0 : parseInt(preview),
			"audioPreviewEnd": parseInt(previewend) == NaN ? 0 : parseInt(previewend),
			"side": GetSideFromTrack(adeproject.SkinValues["Track"]),
			"bg": adeproject.SkinBackground,
			"date": parseInt(new Date().getTime()/1000),
			"version": "Generated by Arcade-One",
			"difficulties": [{
					"ratingClass": 0,
					"title_localized": {
						"en": adeproject.Difficulties2[0].Title
					},
					"chartDesigner": adeproject.Difficulties2[0].ChartDesign == null ? "" : adeproject.Difficulties2[0].ChartDesign,
					"jacketDesigner": adeproject.Difficulties2[0].Illustration == null ? "" : adeproject.Difficulties2[0].Illustration,
					"rating": parseInt(adeproject.Difficulties2[0].Rating.replace(/[^\-0-9]/ig,"")),
					"ratingPlus": adeproject.Difficulties2[0].Rating.indexOf("+") != -1 ? true : false
				},
				{
					"ratingClass": 1,
					"title_localized": {
						"en": adeproject.Difficulties2[1].Title
					},
					"chartDesigner": adeproject.Difficulties2[1].ChartDesign == null ? "" : adeproject.Difficulties2[1].ChartDesign,
					"jacketDesigner": adeproject.Difficulties2[1].Illustration == null ? "" : adeproject.Difficulties2[1].Illustration,
					"rating": parseInt(adeproject.Difficulties2[1].Rating.replace(/[^\-0-9]/ig,"")),
					"ratingPlus": adeproject.Difficulties2[1].Rating.indexOf("+") != -1 ? true : false
				},
				{
					"ratingClass": 2,
					"title_localized": {
						"en": adeproject.Difficulties2[2].Title
					},
					"chartDesigner": adeproject.Difficulties2[2].ChartDesign == null ? "" : adeproject.Difficulties2[2].ChartDesign,
					"jacketDesigner": adeproject.Difficulties2[2].Illustration == null ? "" : adeproject.Difficulties2[2].Illustration,
					"rating": parseInt(adeproject.Difficulties2[2].Rating.replace(/[^\-0-9]/ig,"")),
					"ratingPlus": adeproject.Difficulties2[2].Rating.indexOf("+") != -1 ? true : false
				}
			]
		}]
	};
	if(slst.songs[0].difficulties[0].ratingPlus == false) delete slst.songs[0].difficulties[0].ratingPlus;
	if(slst.songs[0].difficulties[1].ratingPlus == false) delete slst.songs[0].difficulties[1].ratingPlus;
	if(slst.songs[0].difficulties[2].ratingPlus == false) delete slst.songs[0].difficulties[2].ratingPlus;
	if(slst.songs[0].difficulties[0].title_localized.en == null) delete slst.songs[0].difficulties[0].title_localized;
	if(slst.songs[0].difficulties[1].title_localized.en == null) delete slst.songs[0].difficulties[1].title_localized;
	if(slst.songs[0].difficulties[2].title_localized.en == null) delete slst.songs[0].difficulties[2].title_localized;
	if(adeproject.Difficulties2[3] != null)
		if(adeproject.Difficulties2[3].Rating != null)
		{
			if(adeproject.Difficulties2[3].Rating == null || adeproject.Difficulties2[3].Rating == "" || parseInt(adeproject.Difficulties2[3].Rating.replace(/[^\-0-9]/ig,"")) == null) adeproject.Difficulties2[3].Rating = "-1";
			slst.songs[0].difficulties[3] = {
				"ratingClass": 3,
				"title_localized": {
					"en": adeproject.Difficulties2[3].Title
				},
				"chartDesigner": adeproject.Difficulties2[3].ChartDesign == null ? "" : adeproject.Difficulties2[3].ChartDesign,
				"jacketDesigner": adeproject.Difficulties2[3].Illustration == null ? "" : adeproject.Difficulties2[3].Illustration,
				"rating": parseInt(adeproject.Difficulties2[3].Rating.replace(/[^\-0-9]/ig,"")),
				"ratingPlus": adeproject.Difficulties2[3].Rating.indexOf("+") != -1 ? true : false
			}
			if(slst.songs[0].difficulties[3].ratingPlus == false) delete slst.songs[0].difficulties[3].ratingPlus;
			if(slst.songs[0].difficulties[3].title_localized.en == null) delete slst.songs[0].difficulties[3].title_localized;
		}
	var slststr = JSON.stringify(slst, null, 2);
	Flat.WriteFile(GetCurrentProjectFolder() + "/songlist", slststr);
	return "songlist 已生成。";
}

function ArcLineTypeToX(type) {
	switch (type) {
		case ArcLineType.S:
			return "Linear";
		case ArcLineType.B:
			return "InOutSine";
		case ArcLineType.Si:
			return "OutSine";
		case ArcLineType.So:
			return "InSine";
		case ArcLineType.SiSi:
			return "OutSine";
		case ArcLineType.SiSo:
			return "OutSine";
		case ArcLineType.SoSi:
			return "InSine";
		case ArcLineType.SoSo:
			return "InSine";
		default:
			return "Linear";
	}
}

function ArcLineTypeToY(type) {
	switch (type) {
		case ArcLineType.S:
			return "Linear";
		case ArcLineType.B:
			return "Linear";
		case ArcLineType.Si:
			return "Linear";
		case ArcLineType.So:
			return "Linear";
		case ArcLineType.SiSi:
			return "OutSine";
		case ArcLineType.SiSo:
			return "InSine";
		case ArcLineType.SoSi:
			return "OutSine";
		case ArcLineType.SoSo:
			return "InSine";
		default:
			return "Linear";
	}
}

function arc_cutter(divide, type) {
	var notes = GetSelectedNotes();
	if (notes.length != 1) return "请选择并且只能选择一个Arc。";
	var note = notes[0];
	if (!(note instanceof ArcArc)) return "请选择并且只能选择一个Arc。";
	var isVoid = note.IsVoid;
	var XType = ArcLineTypeToX(note.LineType);
	var YType = ArcLineTypeToY(note.LineType);
	for (var i = 0; i < divide; i++) {
		var p = i / (divide);
		var p1 = (i + 1) / (divide);
		var arc = new ArcArc();
		arc.LineType = ArcLineType.S;
		arc.Timing = Ease.Linear(note.Timing, note.EndTiming, p);
		arc.EndTiming = Ease.Linear(note.Timing, note.EndTiming, p1);
		if (type == 2) arc.EndTiming = arc.EndTiming - 1;
		arc.Color = note.Color;
		arc.XStart = Ease.Easing(XType, note.XStart, note.XEnd, p);
		if (type == 4 || type == 7 || type == 6) arc.XEnd = Ease.Easing(XType, note.XStart, note.XEnd, p);
		else arc.XEnd = Ease.Easing(XType, note.XStart, note.XEnd, p1);
		arc.YStart = Ease.Easing(YType, note.YStart, note.YEnd, p);
		if (type == 4 || type == 7 || type == 5) arc.YEnd = Ease.Easing(YType, note.YStart, note.YEnd, p);
		else arc.YEnd = Ease.Easing(YType, note.YStart, note.YEnd, p1);
		if (type == 3) {
			if (isVoid) arc.IsVoid = true;
			else arc.IsVoid = false;
			isVoid = !isVoid;
		}
		else {
			arc.IsVoid = isVoid;
		}
		arc.TimingGroup = note.TimingGroup;
		AddArcEvent(arc);
		if (type == 7) {
			var arc = new ArcArc();
			arc.LineType = ArcLineType.S;
			arc.Timing = Ease.Linear(note.Timing, note.EndTiming, p1);
			arc.EndTiming = Ease.Linear(note.Timing, note.EndTiming, p1);
			arc.Color = note.Color;
			arc.XStart = Ease.Easing(XType, note.XStart, note.XEnd, p);
			arc.XEnd = Ease.Easing(XType, note.XStart, note.XEnd, p1);
			arc.YStart = Ease.Easing(YType, note.YStart, note.YEnd, p);
			arc.YEnd = Ease.Easing(YType, note.YStart, note.YEnd, p1);
			arc.IsVoid = isVoid;
			arc.TimingGroup = note.TimingGroup;
			AddArcEvent(arc);
		}
	}
	RemoveArcEvent(note);
}

function unite_speed(line, tg, baseBPM)
{
	var adeproject = GetCurrentProject();
	var linelist = line.split(/[(,)]/);
	if(linelist.length != 5)
	{
		return "timing语句不正确";
	}
	var time = Number(linelist[1]);
	var bpm = Number(linelist[2]);
	var metreInfo = Number(linelist[3]);
	var oldBaseBPM = bpm;
	var tgn = Number(tg);
	var metre;

	var timing = new ArcTiming();
	timing.Timing = time;
	timing.Bpm = bpm;
	timing.BeatsPerLine = metreInfo;
	timing.TimingGroup = tgn;
	//return [time,bpm,metreInfo,tgn].join(",");
	RemoveArcEvent(timing);

	if(metreInfo == 0)
	{
		return "小节线信息不能得0";
	}
	//return [baseBPM,adeproject.BaseBpm].join(",")
	if(bpm != 0)
	{
		var preMetre = (baseBPM / (oldBaseBPM**2/bpm) * metreInfo).toFixed(2);
		if((preMetre*100) % metreInfo <= metreInfo/2)
		{
			metre = (parseInt(preMetre*100 / metreInfo) * metreInfo)*0.01;
		}
		else
		{
			metre = (parseInt(preMetre*100 / metreInfo) * metreInfo + 1)*0.01;
		}
		bpm = (metre / metreInfo * oldBaseBPM).toFixed(2);
		metreInfo = Math.abs(metre.toFixed(2));
		//return [preMetre,metre].join(",")
	}
	else
	{
		bpm = 0;
		metreInfo = 4;
	}

	bpm > 999999 ? 999999 : bpm;
	bpm < -999999 ? -999999 : bpm;
	metreInfo <= 0 ? 4 : metreInfo;

	timing.Timing = time;
	timing.Bpm = bpm;
	timing.BeatsPerLine = metreInfo;
	timing.TimingGroup = tgn;
	AddArcEvent(timing);
	return [time,bpm,metreInfo].join(",");
}